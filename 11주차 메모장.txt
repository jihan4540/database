-- 인공_데이터베이스(QC) (담당: 김희숙)  11주차 실습(stu)

==============================
-- (MySQL) safe mode 해제
SET SQL_SAFE_UPDATES = 0;

-- 테이블 구조 확인
DESC 테이블명;
==============================
/*------- 제약조건 확인(MySQL) ------ */
-- (MySQL) 제약조건 확인

-- 제약조건(부서, 사원)
SELECT * 
FROM  information_schema.table_constraints
WHERE table_name IN ('부서','사원');
/* -------------------------------------- */
==============================
11주차 (실습)
==============================
# (MySQL)
1단계: 데이터베이스 생성  testdb
    사용할 데이터베이스 선택
USE testdb;

2단계: 테이블 생성         
                                   성적, 성적2,
                                    [Quiz 1] fruit
                                    [Quiz 2] 고객
                                    [Quiz 3] 사원
                                    [실습 1] 조인 (부서, 사원)
                                    [실습 2] 조인 (freshman, dmember)
                                    [실습 3] 조인 (학생, 과목, 수강)
                                    [Quiz 4] 조인 (고객, 주문)
                           [과제 2] ch5 (학생, 과목, 수강)         

3단계: 데이터 입력

4단계: 데이터 조회
select * from customer;
--------------------------------------------------

-----------------------------------------
# [요약] 집계함수 (sungjuk_group.sql)

-- 집계함수 : 여러 개 행의 값들을 계산하여 하나의 결과를 산출하는 함수
(aggregate function)

-- COUNT(*)     : NULL 포함하여 계산
-- COUNT(필드) : NULL 제외하여 계산

-- Group by(그룹화): 테이블로 부터 어떤 열을 기준해서
                   그룹으로 묶어 
                   합계 계산하거나 평균산출하여 검색
-----------------------------------------
# [요약]  /* SELECT 문법 순서 */
SELECT
FROM
WHERE
GROUP  BY
HAVING
ORDER  BY
-----------------------------------------
[복습 1] SELECT (집계함수)
-- 성적(이름, 점수)
-- 성적2(이름, 과목, 점수)

/* --------------------------------------------- */
/* -------- 집계함수, 그룹화 ---------------- */
drop table 성적;
drop table 성적2;

-- 집계함수
CREATE TABLE 성적(
     이름 varchar(9) NOT NULL primary key, 
     점수 int 
);

INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '홍길동', 87 );
INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '임꺽정', 60 );
INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '박찬호', 75 );
INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '선동열', 70 );
INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '홍명보', 90 );
INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '차범근', 75 );
INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '강성범', 68 );
INSERT INTO 성적 ( 이름, 점수 ) VALUES ( '신동엽', null);

-- 그룹화
-- GROUP BY, HAVING

CREATE TABLE 성적2 (
    이름 varchar(9) NOT NULL primary key , 
    과목 varchar(8), 
    점수 int
);

INSERT INTO 성적2 VALUES ('홍길동', '영어',87 );
INSERT INTO 성적2 VALUES ('임꺽정', '수학',60 );
INSERT INTO 성적2 VALUES ('박찬호', '국어',75 );
INSERT INTO 성적2 VALUES ('선동열', '영어',70 );
INSERT INTO 성적2 VALUES ('홍명보', '수학',90 );
INSERT INTO 성적2 VALUES ('차범근', '수학',75 );
INSERT INTO 성적2 VALUES ('강성범', '수학',68 );
INSERT INTO 성적2 VALUES ('신동엽', '영어',null);

SELECT * FROM 성적;
SELECT * FROM 성적2;
/* --------------------------------------------- */

[복습 1-1]  SELECT (집계함수)

-- 성적(이름, 점수)
-- 1-1) 최고 점수를 검색하라 
-- 1-2) 최저 점수를 검색하라
-- 1-3) 점수합계를 검색하라 
-- 1-4) 평균점수를 검색하라
-- 1-5) 학생수는 모두 몇 명인지 검색하라
-- 1-6) 시험에 응시한 학생수는 모두 몇 명인지 검색하라
-----------------------------------------
[복습 1-2] SELECT (그룹화)

-- 성적2(이름, 과목, 점수)
-- 2-1) 각 과목수는 몇 개인지 검색하라(DISTINCT 사용)
<실행결과>
과목수
3

select count(distinct 과목)
from 성적2;

-- 2-2) 과목별 수강생은 몇 명인지 검색하라(GROUP BY)
<실행결과>
수학  4
국어  1
영어  3

select 과목, count(*)
from 성적2; 
group by 과목;

-- 2-3) 과목별 평균점수를 검색하라(GROUP BY)

select 과목 avg(점수)
from 성적2;
group by 과목;

-- 2-4) 과목별 평균점수 75 보다 높은 과목별 평균점수를 검색하라(HAVING)

-- ROUND() 함수

select 과목, ROUND(AVG(점수))
from 성적2
group by 과목;
having avg(점수) >= 75 ;

--2-5) 점수가 70 이상인 과목이름, 과목 평균점수를 과목의 과목별 평균점수가 75 이상인 것만
--과목별 평균점수가 높은 순으로 검색하라(ORDER  BY)

select
from 성적2;
where 점수 >= 70
group by 과목
having avg(점수) >=75
order by avg(점수) desc;

-----------------------------------------
[Quiz 1] fruit
[Quiz 2] 고객
[Quiz 3] 사원

[Quiz 4] (교재6장) 조인(고객, 주문)
-----------------------------------------
[Quiz 1]  (MySQL) 실습

--  1. 다음과 같은 fruit 테이블을 생성하고 데이터 입력하는 SQL문법을 작성하라
-- (기본키: 과일번호)

-- 1) 다음 테이블을 생성하시오

과일번호 과일이름   가격   색상   원산지
1           사과          2000  빨간색  한국
2           배             5000  노란색  한국
3           바나나       1500  노란색  인도네시아
4           키위          4000  초록색  호주
5           수박          8000  초록색  한국

-- 2-1) 노란색 과일의 이름, 색상을 검색하라.
-- 2-2) 과일이름을 오름차순으로 정렬하여 모든 필드를 검색하라
-- 2-3) 가격이 5000 이하인 빨간색 과일의 이름을 검색하라
-- 2-4) 가격이 2000 ~ 5000 사이의 과일이름과 가격, 원산지를 검색하라(BETWEEN AND)
-- 2-5) 색상이 노란색이거나 초록색인 과일이름, 색상을 검색하라(IN 사용)

select 과일이름, 색상
from fruit 
where 색상 in ('노란색', '초록색')

-- 2-6) 색상이 노란색이거나 초록색인 과일이름, 색상을 검색하라(논리연산자 OR 사용)

select 과일이름, 색상 
from fruit
where 색상= '노란색'  or 색상='초록색'; 

-- 2-7) 원산지가 한국이 아닌 과일이름, 원산지를 검색하라

select 과일이름 , 원산지
from fruit 
where 원산지 <> '한국';

select 과일이름 , 원산지
from fruit 
where 원산지 != '한국';


/* --------------------------------------------- */
/* -------------- fruit 스키마 ---------------- */
-- (MySQL)

drop table if exists fruit;

create table fruit (
    과일번호     int      NOT NULL  ,
    과일이름     varchar(30)           ,
    가격           int                      ,
    색상           char(12)              ,
    원산지        varchar(30)          , 
    PRIMARY KEY(과일번호)
);

insert into fruit values('1','사과',2000,'빨간색','한국');
insert into fruit values('2','배',5000,'노란색','한국');
insert into fruit values('3','바나나',1500,'노란색','인도네시아');
insert into fruit values('4','키위',4000,'초록색','호주');
insert into fruit values('5','수박',8000,'초록색','한국');

select * from fruit;
/* --------------------------------------------- */

-----------------------------------------
-- [Quiz 2]  (MySQL) 실습: (고객)

-- 다음 조건을 만족하는 테이블을 생성하시오

-- 고객 테이블은 고객아이디, 고객이름, 나이, 등급, 직업, 적립금 속성으로
-- 구성되고, 고객아이디 속성이 기본키다.
-- 고객이름은 값을 반드시 입력해야 하고,
-- 적립금 속성은 값을 입력하지 않으면 0이 기본으로 입력되도록 한다

/*--------------고객 스키마 ---------------*/
drop table if exists 고객;

create table 고객 (
    고객아이디  varchar(8)      NOT NULL  ,
    고객이름     varchar(20)    NOT NULL  ,
    나이           int ,
    등급           varchar(10) ,
    직업           varchar(20) , 
    적립금        int                DEFAULT 0 ,
    PRIMARY KEY(고객아이디)
);

-- 고객(고객아이디,고객이름,나이,등급,직업,적립금)
insert into 고객 values('apple','정소화',20,'gold','학생',1000);
insert into 고객 values('banana','김선우',25,'vip','간호사',2500);
insert into 고객 values('carrot','고명석',28,'gold','교사',4500);
insert into 고객 values('orange','김용축',22,'silver','학생',NULL);
insert into 고객 values('melon','성원용',35,'gold','회사원',5000);
insert into 고객 values('peach','오형준',NULL,'silver','의사',300);
insert into 고객 values('pear','채광주',31,'silver','회사원',500);

select * from 고객;
/*------------------------------------------------------*/

-- [Quiz 2]  (MySQL) 실습: (고객)

-- 1) 직업이 학생, 간호사, 교사인 고객의 이름, 직업, 등급을 검색

select 고객이름, 직업, 등급
from  고객
where  직업 in ('학생','간호사','교사');

-- 2) 적립금이 300 이상인 고객 중에서 
-- 나이를 알 수 없는 고객아이디, 나이, 적립금을 검색하라

select 고객아이디,나이,적립금
from  고객
where 적립금 >= 300 and 나이 is null

-- 3) 등급이 gold인 고객 중에서 고객아이디, 등급, 적립금을 검색하라.  
-- 단, 등급을 오름차순 정렬하고 등급이 같으면 적립금의 내림차순 정렬하라

select 고객아이디,등급,적립금
from 고객
where 등급='gold'
order by 등급 ASC, 적립금 desc;


-- 4) 등급별 적립급 평균을 검색하라, 
-- (단, 적립금 평균이 1000원 이상인 등급에 대해 검색)
-----------------------------------------
-- [Quiz 3]  (MySQL) 실습: (사원)

-- 1) 최대 연봉을 구하시오
-- 2) 사원수를 구하시오
-- 3) 직책의 개수를 중복없이 검색하시오

-- 4) 직책별 연봉의 평균을 구하시오
-- 5) 직책별 사원수를 구하시오
-- 6) 연봉이 2500 이상인 사원이 2명 이상인 
-- 직책의 사원수를 구하시오

/*--------------사원 스키마 ---------------*/
drop table if exists 사원;

create table 사원 (
    직원코드  varchar(8)      NOT NULL  ,
    성명        varchar(20)    NOT NULL  ,
    직책        varchar(10) ,
    연봉        int            ,
    PRIMARY KEY(직원코드)
);

-- 사원(직원코드,성명,직책,연봉)
insert into 사원 values('161353','김미나','대리',2300);
insert into 사원 values('181323','최영락','사원',1900);
insert into 사원 values('151453','홍진호','과장',2800);
insert into 사원 values('135485','구준표','과장',3000);
insert into 사원 values('104895','김나래','팀장',3600);
insert into 사원 values('165484','김하늘','대리',2400);

select * from 사원;
/*------------------------------------------------------*/
-----------------------------------------


-----------------------------------------
# [요약] 조인 (join)

조인 : 두 개 이상의 테이블에서 원하는 결과를 검색
       (공통 필드)

1) 내부조인: 두 개의 릴레이션에서 inner join
            일치하는 행을 검색
2) 외부조인: 두 개의 릴레이션에서 outer join
            일치하지 않는 행도 검색

내부조인: 세타조인, 동등조인, 자연조인
(theta join, equi join, natural join)

세타조인 >, >=, =. =<. 

동등조인 =      
    
외부조인: 왼쪽외부조인, 오른쪽외부조인, 완전외부조인
(left outer join, right outer join, full outer join)
-----------------------------------------
-- [실습] 조인

-- 1. 내부 조인
-- 방법1)
SELECT 
FROM    
WHERE  

-- 방법2)
SELECT 
FROM  
ON     

-- 2 외부 조인
-- 방법1)
SELECT 
FROM   
WHERE  

-- 방법2)
SELECT 
FROM  
ON     
-----------------------------------------
-- 조인 실습
[실습 1] 부서, 사원
[실습 2] freshman, dmember
[실습 3] 학생, 수강, 과목

[Quiz 4] (교재6장) 조인(고객, 주문)
-----------------------------------------
[실습 1] 부서, 사원
-- 부서(부서코드, 부서이름)
-- 사원(사원번호,사원이름,부서코드)

-- 1) 부서코드, 부서이름, 사원이름을 검색하라
-- 방법 1)

select 부서.부서코드,부서이름, 사원이름
from  부서 , 사원
where 부서.부서코드 = 사원.부서코드;

-- 방법 2)

select 부서.부서코드,부서이름,사원이름
from 부서     inner join 사원
on 부서.부서코드 = 사원.부서코드;

/* -------------------------------------- */
-- 부서(부서코드, 부서이름)         
-- 사원(사원번호, 사원이름, 부서코드) 

drop table if exists 사원;
drop table if exists 부서;

CREATE TABLE 부서 (
        부서코드   char(1)     NOT NULL ,
        부서이름    varchar(10) ,
        constraint pk_부서_부서코드 PRIMARY KEY(부서코드)
);

CREATE TABLE 사원 (
        사원번호   int     NOT NULL ,
        사원이름   varchar(20) ,
        부서코드   char(1) ,
        constraint pk_사원_사원번호 PRIMARY KEY(사원번호) ,
        constraint fk_사원_부서코드 FOREIGN KEY (부서코드) 
               REFERENCES 부서(부서코드) 
               ON DELETE CASCADE
);

insert into 부서(부서코드, 부서이름) values('A','인사부');
insert into 부서(부서코드, 부서이름) values('B','연구부');
insert into 부서(부서코드, 부서이름) values('C','홍보부');

insert into 사원 values(1,'홍길동','C');
insert into 사원 values(2,'임꺽정','A');
insert into 사원 values(3,'차명석','A');

select * from 부서;
select * from 사원;
/* -------------------------------------- */

-----------------------------------------
[실습 2] freshman, dmember
-- 1. 내부조인
      1-1) 동등 조인(equi join)
      1-2) 자연 조인(natural join)

-- 2. 외부조인
      2-1) 왼쪽   외부조인
      2-2) 오른쪽 외부조인
      2-3) 완전    외부조인

/* -------------------------------------- */
/* 조인 실습용  */
drop table if exists freshman;
drop table if exists dmember;

CREATE TABLE freshman ( 
    name    VARCHAR(12) NOT NULL ,
    address VARCHAR(9)
);

CREATE TABLE dmember ( 
     name      VARCHAR(12) NOT NULL ,
     dept_name VARCHAR(30)
);

INSERT INTO freshman VALUES('김광식', '서울');
INSERT INTO freshman VALUES('김현정', '대전');
INSERT INTO freshman VALUES('조영수', '대전');

INSERT INTO dmember VALUES('김광식', '컴퓨터공학과');
INSERT INTO dmember VALUES('김현정', '산업공학과');
INSERT INTO dmember VALUES('이진영', '전자공학과');

SELECT * FROM freshman;
SELECT * FROM dmember;
/* -------------------------------------- */
-----------------------------------------
[실습 3] 학생, 수강, 과목

-- 학생(학번, 학생명)
-- 과목(과목번호,과목명)
-- 수강(학번, 과목번호,성적)

-- 3-1) 수강한 학생의 학생명, 과목명, 성적을
-- 검색하라(내부조인)

-- 3-2) 이홍근의 학생명, 과목명, 성적을 검색하라

/* -------------------------------------- */
-- 테이블 3개 조인
-- 학생(학번, 학생명)
-- 과목(과목번호, 과목명)
-- 수강(학번, 과목번호, 성적)

drop table if exists 수강;
drop table if exists 학생;
drop table if exists 과목;

create table 학생 (
    학번     char(5) ,
    학생명  varchar(20),
    primary key(학번)
);

create table 과목 (
    과목번호  char(5) ,
    과목명     varchar(30 ),
    primary key(과목번호)
);
 
create table 수강 (
    학번        char(5),
    과목번호  char(5),
    성적        int,
    primary key(학번, 과목번호),
    foreign key (학번) references 학생(학번),
    foreign key (과목번호) references 과목(과목번호)
);

insert into 학생 values('11002','이홍근');
insert into 학생 values('24036','김순미');
insert into 학생 values('30419','박상웅');
insert into 학생 values('30555','홍서범');
insert into 학생 values('31890','유동희');
insert into 학생 values('31892','이정무');
insert into 학생 values('32000','김윤식');

insert into 과목 values('CS310','데이터베이스');
insert into 과목 values('CS313','운영체제');
insert into 과목 values('CS345','자료구조');
insert into 과목 values('CS326','자바');
insert into 과목 values('CS546','DB프로그래밍');
insert into 과목 values('CS378','멀티미디어');
insert into 과목 values('CS388','웹프로그래밍');

insert into 수강 values('11002','CS310',98);
insert into 수강 values('11002','CS313',88);
insert into 수강 values('24036','CS345',90);
insert into 수강 values('30419','CS326',78);
insert into 수강 values('31892','CS388',86);
insert into 수강 values('32000','CS378',94);
insert into 수강 values('31890','CS310',92);
 
select * from 학생;
select * from 과목;
select * from 수강;

/* -------------------------------------- */

-----------------------------------------
[Quiz 4] 조인(고객, 주문)

-- 고객(고객아이디, 고객이름, 나이, 등급)
-- 주문(주문번호, 주문고객, 주문제품, 수량)

-- (자연조인)
-- 1-1) 고객아이디, 고객이름, 나이, 주문번호, 주문제품을 검색하라

-- (왼쪽 외부조인)
-- 1-2) 고객아이디, 고객이름, 나이, 주문번호, 주문제품을 검색하라
-- (단, 주문하지 않은 고객도 포함)

/* -------------------------------------- */
/* 조인 실습용: join */
-- (MySQL)

-- 사용할 데이터베이스 선택
DROP TABLE if exists 주문;
DROP TABLE if exists 고객;

-- 고객(고객아이디, 고객이름, 나이, 등급)
-- 주문(주문번호, 주문고객, 주문제품, 수량)

CREATE TABLE 고객 (
	고객아이디  VARCHAR(20)	NOT NULL,
	고객이름    VARCHAR(10),
	나이         INT,
	등급         VARCHAR(10)	NOT NULL,
	PRIMARY KEY(고객아이디)
);

CREATE TABLE 주문 (
	주문번호    CHAR(4)	NOT NULL,
	주문고객    VARCHAR(20),
	주문제품    varCHAR(20),
	수량         INT,
	PRIMARY KEY(주문번호),
	FOREIGN KEY(주문고객) REFERENCES 고객(고객아이디)
);

--  고객(고객아이디, 고객이름, 나이, 등급)
INSERT INTO 고객 VALUES ('apple', '김현준', 20, 'gold');
INSERT INTO 고객 VALUES ('banana', '정소화', 25, 'vip');
INSERT INTO 고객 VALUES ('carrot', '원유선', 28, 'gold');
INSERT INTO 고객 VALUES ('orange', '정지영', 22, 'silver');

--  주문(주문번호, 주문고객, 주문제품, 수량)
INSERT INTO 주문 VALUES ('1001', 'apple', '진짜우동', 10);
INSERT INTO 주문 VALUES ('1002', 'carrot', '맛있는파이', 5);
INSERT INTO 주문 VALUES ('1003', 'banana', '그대로만두', 45);

-- 고객(고객아이디, 고객이름, 나이, 등급)
-- 주문(주문번호, 주문고객, 주문제품, 수량)

select * from 고객;
select * from 주문;
/* -------------------------------------- */

-- ch5 SQL ("SQL과 NoSQL 기반의 데이터베이스 입문", 박성진, 생능
/* ---------------------------------------------------- */
drop database if exists univDB;

-- 교재 5장 스키마 생성
CREATE DATABASE `univDB` 
  DEFAULT CHARACTER SET utf8mb4;

use univDB;
/* ---------------------------------------------------- */
-- [과제2] 5장 SELECT (01)
/* ---------------------------------------------------- */

-- 과목(과목번호, 이름, 강의실, 개설학과, 시수)
-- 학생(학번, 이름, 주소, 학년, 나이, 휴대폰번호, 소속학과)
-- 수강(학번, 과목번호, 신청날짜, 중간성적, 기말성적, 평가학점)

[실습 1] 다음에 대하여 SQL문법과 실행결과를 작성하라 

-- 예제5-1) 전체 학생의 이름과 주소를 검색하시오
-- 예제5-2) 전체 학생의 모든 정보를 검색하시오
-- (* 로 검색) 
-- (필드명으로 검색)

-- 예제5-3) 전체 학생의 소속학과 정보를 중복없이 검색하시오
-- (DISTINCT 사용)
-- 예제5-3-2) 전체 학생의 소속학과 정보를 모두 검색하시오
-- (ALL 키워드 사용)

-- 예제5-4) 학생 중에서 2학년 이상인 컴퓨터 학과 학생의 
-- 이름, 학년, 소속학과, 휴대폰번호 정보를 검색하시오

-- 예제5-5) 1, 2, 3학년 학생이거나 컴퓨터 학과에
-- 소속되지 않은 학생의 이름, 학년, 소속학과, 휴대폰번호
-- 정보를 검색하시오
-- (부등호 사용)
-- (BETWEEN AND 사용)

-- 예제5-6) 컴퓨터 학과나 정보통신 학과의 학생의 이름과 학년, 소속학과 정보를
-- 오름차순으로 검색하시오

-- 예제5-7) 전체 학생의 모든 정보를 검색하되 학년을 기준으로 1차 오름차순 정렬하고,
-- 학년이 같은 경우에는 이름을 기준으로 2차 내림차순 정렬하여 검색하시오

[실습 2] 집계함수, group by

-- 예제5-8) 전체 학생수를 검색하시오
-- 1) * 을 이용해 계산하는 경우
-- 2) 학번 속성을 이용해 계산하는 경우
-- 3) 주소 속성을 이용해 계산하는 경우(널 값 제외) 

-- 예제5-8-2) 전체학생수, 주소를 입력한 학생수, 주소의 종류를 중복없이 검색한 개수를 
-- 검색하시오

-- 예제5-9) 여 학생의 평균 나이를 검색하시오

-- 예제5-10) 전체 학생의 성별 최고 나이와 최저 나이를 검색하시오

-- 예제5-11) 20대 학생만을 대상으로 나이별 학생수를 검색하시오
-- 예제5-12) 각 학년별로 2명 이상의 학생을 갖는 학년에 대해서만
-- 학생별 학생수를 검색하시오

[실습 3] LIKE 연산자/ 널 값 검색 / 집합 연산자

-- 예제5-13) 이 씨 성을 가진 학생들의 학번과 학생 이름을 검색하시오
-- 예제5-14) 주소지가 '서울'인 학생의 이름, 주소, 학년을 
-- 학년순(내림차순)으로 검색하시오

-- 예제5-15) 휴대폰번호가 등록되지 않은(널 값을 갖는)
-- 학생의 이름과 휴대폰번호를 검색하시오

-- 예제5-16) '여' 학생이거나 'A' 학점을 받은 학생의 학번을 검색하시오

[실습 4] 조인

-- 예제5-18) 전체 학생의 기본 정보와 모든 수강 정보를 검색하시오
-- 1) (SELECT FROM WHERE 방법)
-- 2) (SELECT FROM ON 방법)

-- 예제5-19) 학생 중에서 과목번호가 c002 인 과목을 수강한 학생의 
-- 학번과 이름, 과목번호, 변환중간성적(학생별중간성적의 10% 가산점수)을 검색하시오
-- 1) (SELECT FROM WHERE 방법)
-- 2) (SELECT FROM ON 방법)

-- 예제5-20) 학생 중에서 정보보호 과목을 수강한 학생의 
-- 학번과 이름, 과목번호를 검색하시오
-- 1) (SELECT FROM WHERE 방법)
-- 2) (SELECT FROM ON 방법)

-- 예제5-21) 학생 중에서 과목번호가 c002 인 과목을 수강한 학생의 
-- 이름, 과목번호를 검색하시오
-- (테이블 별칭 as 사용)


# [외부 조인]

-- 예제5-23) 과목을 수강하지 않은 학생을 포함하여 모든 학생의 
-- 학번, 이름과 학생이 수강한 교과목의 평가학점을 검색하시오
/* ======================================== */
